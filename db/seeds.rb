# This file should ensure the existence of records required to run the application in every environment (production,
# development, test). The code here should be idempotent so that it can be executed at any point in every environment.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Example:
#
#   ["Action", "Comedy", "Drama", "Horror"].each do |genre_name|
#     MovieGenre.find_or_create_by!(name: genre_name)
#   end
# db/seeds.rb

puts "ðŸš€ Ejecutando seed seguro (sin duplicados)..."

# 1. INDUSTRIAS
industries = [
  "AdministraciÃ³n de Edificios", "LogÃ­stica", "Marketing Digital", "Turismo", "Comercio ElectrÃ³nico",
  "Contabilidad", "Desarrollo de Software", "Veterinarias", "Arquitectura", "ConsultorÃ­as",
  "Servicios Financieros", "OdontologÃ­a", "Restaurantes", "Constructoras", "Servicios JurÃ­dicos",
  "IngenierÃ­a ElÃ©ctrica", "Escuelas de MÃºsica", "Agencias de Viajes", "Empresas de Seguridad", "Farmacias"
]

industries.each do |name|
  industry = Industry.find_or_initialize_by(name: name)
  industry.email_count ||= rand(150..3000)
  industry.save!
end

puts "âœ… Industrias listas: #{Industry.count}"

# 2. USUARIO DE PRUEBA
user = User.find_or_create_by!(email: "admin@mail.com") do |u|
  u.password = "password"
  u.role = :admin
end
puts "ðŸ‘¤ Usuario de prueba: #{user.email}"

# 3. CAMPAÃ‘AS DE PRUEBA
10.times do |i|
  # campaign_name = "SeedCampaign-#{i + 1}"
  Campaign.find_or_create_by!(user: user, email_limit: rand(500..2000), industry: Industry.order("RANDOM()").first) do |c|
    c.status = %w[draft scheduled sent].sample
  end
end
puts "ðŸ“© CampaÃ±as creadas: #{Campaign.count}"

# 4. EMAIL RECORDS (NO DUPLICADOS)
100.times do |i|
  email = "user#{i + 1}@empresa.com"
  EmailRecord.find_or_create_by!(email: email) do |record|
    record.company = "Empresa #{i + 1}"
    record.website = "https://empresa#{i + 1}.cl"
    record.industry = Industry.order("RANDOM()").first
  end
end
puts "ðŸ“§ EmailRecords totales: #{EmailRecord.count}"

# 5. CAMPAIGN EMAILS (EVITANDO DUPLICADOS)
Campaign.all.each do |campaign|
  records = EmailRecord.order("RANDOM()").limit(5)
  records.each do |record|
    CampaignEmail.find_or_create_by!(campaign: campaign, email_record: record)
  end
end
puts "ðŸ”— Relaciones CampaÃ±a-Email: #{CampaignEmail.count}"

puts "ðŸŽ‰ Seed ejecutado con Ã©xito y sin duplicaciones."
